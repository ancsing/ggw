/* Generated By:JavaCC: Do not edit this line. ParserConstants.java */
package geogebra.kernel.parser;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface ParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int EOL = 5;
  /** RegularExpression Id. */
  int ASSIGNMENT = 6;
  /** RegularExpression Id. */
  int VERTICAL_BAR = 7;
  /** RegularExpression Id. */
  int NOT = 8;
  /** RegularExpression Id. */
  int OR = 9;
  /** RegularExpression Id. */
  int AND = 10;
  /** RegularExpression Id. */
  int EQUAL_BOOLEAN = 11;
  /** RegularExpression Id. */
  int NOT_EQUAL = 12;
  /** RegularExpression Id. */
  int IS_ELEMENT_OF = 13;
  /** RegularExpression Id. */
  int IS_SUBSET_OF = 14;
  /** RegularExpression Id. */
  int IS_SUBSET_OF_STRICT = 15;
  /** RegularExpression Id. */
  int SET_DIFFERENCE = 16;
  /** RegularExpression Id. */
  int LESS = 17;
  /** RegularExpression Id. */
  int GREATER = 18;
  /** RegularExpression Id. */
  int LESS_EQUAL = 19;
  /** RegularExpression Id. */
  int GREATER_EQUAL = 20;
  /** RegularExpression Id. */
  int PARALLEL = 21;
  /** RegularExpression Id. */
  int PERPENDICULAR = 22;
  /** RegularExpression Id. */
  int EQUAL = 23;
  /** RegularExpression Id. */
  int PLUS = 24;
  /** RegularExpression Id. */
  int MINUS = 25;
  /** RegularExpression Id. */
  int SUPERSCRIPT_MINUS = 26;
  /** RegularExpression Id. */
  int POWER = 27;
  /** RegularExpression Id. */
  int MULTIPLY = 28;
  /** RegularExpression Id. */
  int VECTORPRODUCT = 29;
  /** RegularExpression Id. */
  int DIVIDE = 30;
  /** RegularExpression Id. */
  int FACTORIAL = 31;
  /** RegularExpression Id. */
  int UNDEFINED = 32;
  /** RegularExpression Id. */
  int POWERN = 33;
  /** RegularExpression Id. */
  int INDEXDIGIT = 34;
  /** RegularExpression Id. */
  int PI = 35;
  /** RegularExpression Id. */
  int E = 36;
  /** RegularExpression Id. */
  int IMAGINARY = 37;
  /** RegularExpression Id. */
  int DEGREE = 38;
  /** RegularExpression Id. */
  int INFINITY = 39;
  /** RegularExpression Id. */
  int MINUS_INFINITY = 40;
  /** RegularExpression Id. */
  int RAD = 41;
  /** RegularExpression Id. */
  int DERIVATIVE = 42;
  /** RegularExpression Id. */
  int TRUE = 43;
  /** RegularExpression Id. */
  int FALSE = 44;
  /** RegularExpression Id. */
  int DECIMAL_POINT = 45;
  /** RegularExpression Id. */
  int COMMA = 46;
  /** RegularExpression Id. */
  int VARX = 47;
  /** RegularExpression Id. */
  int VARY = 48;
  /** RegularExpression Id. */
  int VARZ = 49;
  /** RegularExpression Id. */
  int FLOAT = 50;
  /** RegularExpression Id. */
  int EFLOAT = 51;
  /** RegularExpression Id. */
  int PERCENTAGE = 52;
  /** RegularExpression Id. */
  int INTEGER = 53;
  /** RegularExpression Id. */
  int DIGIT = 54;
  /** RegularExpression Id. */
  int SPREADSHEET_LABEL = 55;
  /** RegularExpression Id. */
  int LABEL = 56;
  /** RegularExpression Id. */
  int INDEX = 57;
  /** RegularExpression Id. */
  int LETTER = 58;
  /** RegularExpression Id. */
  int X_FUNC = 59;
  /** RegularExpression Id. */
  int Y_FUNC = 60;
  /** RegularExpression Id. */
  int Z_FUNC = 61;
  /** RegularExpression Id. */
  int MAT_FUNC = 62;
  /** RegularExpression Id. */
  int COS_FUNC = 63;
  /** RegularExpression Id. */
  int COSN_FUNC = 64;
  /** RegularExpression Id. */
  int SIN_FUNC = 65;
  /** RegularExpression Id. */
  int SINN_FUNC = 66;
  /** RegularExpression Id. */
  int TAN_FUNC = 67;
  /** RegularExpression Id. */
  int TANN_FUNC = 68;
  /** RegularExpression Id. */
  int CSC_FUNC = 69;
  /** RegularExpression Id. */
  int CSCN_FUNC = 70;
  /** RegularExpression Id. */
  int SEC_FUNC = 71;
  /** RegularExpression Id. */
  int SECN_FUNC = 72;
  /** RegularExpression Id. */
  int COT_FUNC = 73;
  /** RegularExpression Id. */
  int COTN_FUNC = 74;
  /** RegularExpression Id. */
  int CSCH_FUNC = 75;
  /** RegularExpression Id. */
  int CSCHN_FUNC = 76;
  /** RegularExpression Id. */
  int SECH_FUNC = 77;
  /** RegularExpression Id. */
  int SECHN_FUNC = 78;
  /** RegularExpression Id. */
  int COTH_FUNC = 79;
  /** RegularExpression Id. */
  int COTHN_FUNC = 80;
  /** RegularExpression Id. */
  int ACOS_FUNC = 81;
  /** RegularExpression Id. */
  int ASIN_FUNC = 82;
  /** RegularExpression Id. */
  int ATAN_FUNC = 83;
  /** RegularExpression Id. */
  int ATAN2_FUNC = 84;
  /** RegularExpression Id. */
  int ERF_FUNC = 85;
  /** RegularExpression Id. */
  int COSH_FUNC = 86;
  /** RegularExpression Id. */
  int COSHN_FUNC = 87;
  /** RegularExpression Id. */
  int SINH_FUNC = 88;
  /** RegularExpression Id. */
  int SINHN_FUNC = 89;
  /** RegularExpression Id. */
  int TANH_FUNC = 90;
  /** RegularExpression Id. */
  int TANHN_FUNC = 91;
  /** RegularExpression Id. */
  int ACOSH_FUNC = 92;
  /** RegularExpression Id. */
  int ASINH_FUNC = 93;
  /** RegularExpression Id. */
  int ATANH_FUNC = 94;
  /** RegularExpression Id. */
  int EXP_FUNC = 95;
  /** RegularExpression Id. */
  int LOG_FUNC = 96;
  /** RegularExpression Id. */
  int LD_FUNC = 97;
  /** RegularExpression Id. */
  int LG_FUNC = 98;
  /** RegularExpression Id. */
  int BETA_FUNC = 99;
  /** RegularExpression Id. */
  int BETA_REGULARIZED_FUNC = 100;
  /** RegularExpression Id. */
  int GAMMA_FUNC = 101;
  /** RegularExpression Id. */
  int GAMMA_REGULARIZED_FUNC = 102;
  /** RegularExpression Id. */
  int SQRT_FUNC = 103;
  /** RegularExpression Id. */
  int CBRT_FUNC = 104;
  /** RegularExpression Id. */
  int ABS_FUNC = 105;
  /** RegularExpression Id. */
  int SGN_FUNC = 106;
  /** RegularExpression Id. */
  int FLOOR_FUNC = 107;
  /** RegularExpression Id. */
  int CEIL_FUNC = 108;
  /** RegularExpression Id. */
  int CONJUGATE_FUNC = 109;
  /** RegularExpression Id. */
  int ARG_FUNC = 110;
  /** RegularExpression Id. */
  int ROUND_FUNC = 111;
  /** RegularExpression Id. */
  int RANDOM_FUNC = 112;
  /** RegularExpression Id. */
  int MP_POLARTOPOINT = 113;
  /** RegularExpression Id. */
  int FUNCTION_LABEL = 114;
  /** RegularExpression Id. */
  int TEXT = 115;
  /** RegularExpression Id. */
  int CHAR = 116;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\r\"",
    "\"\\t\"",
    "\"\\n\"",
    "\";\"",
    "\":=\"",
    "\"|\"",
    "\"\\u00ac\"",
    "<OR>",
    "<AND>",
    "<EQUAL_BOOLEAN>",
    "<NOT_EQUAL>",
    "\"\\u2208\"",
    "\"\\u2286\"",
    "\"\\u2282\"",
    "\"\\\\\"",
    "\"<\"",
    "\">\"",
    "<LESS_EQUAL>",
    "<GREATER_EQUAL>",
    "\"\\u2225\"",
    "\"\\u22a5\"",
    "\"=\"",
    "\"+\"",
    "<MINUS>",
    "\"\\u207b\"",
    "<POWER>",
    "<MULTIPLY>",
    "\"\\u2297\"",
    "\"/\"",
    "\"!\"",
    "<UNDEFINED>",
    "<POWERN>",
    "<INDEXDIGIT>",
    "<PI>",
    "<E>",
    "<IMAGINARY>",
    "\"\\u00b0\"",
    "<INFINITY>",
    "\"minf\"",
    "\"rad\"",
    "\"\\\'\"",
    "<TRUE>",
    "<FALSE>",
    "<DECIMAL_POINT>",
    "<COMMA>",
    "\"x\"",
    "\"y\"",
    "\"z\"",
    "<FLOAT>",
    "<EFLOAT>",
    "<PERCENTAGE>",
    "<INTEGER>",
    "<DIGIT>",
    "<SPREADSHEET_LABEL>",
    "<LABEL>",
    "<INDEX>",
    "<LETTER>",
    "<X_FUNC>",
    "<Y_FUNC>",
    "<Z_FUNC>",
    "\"mat(\"",
    "<COS_FUNC>",
    "<COSN_FUNC>",
    "<SIN_FUNC>",
    "<SINN_FUNC>",
    "<TAN_FUNC>",
    "<TANN_FUNC>",
    "<CSC_FUNC>",
    "<CSCN_FUNC>",
    "<SEC_FUNC>",
    "<SECN_FUNC>",
    "<COT_FUNC>",
    "<COTN_FUNC>",
    "<CSCH_FUNC>",
    "<CSCHN_FUNC>",
    "<SECH_FUNC>",
    "<SECHN_FUNC>",
    "<COTH_FUNC>",
    "<COTHN_FUNC>",
    "<ACOS_FUNC>",
    "<ASIN_FUNC>",
    "<ATAN_FUNC>",
    "<ATAN2_FUNC>",
    "\"erf(\"",
    "<COSH_FUNC>",
    "<COSHN_FUNC>",
    "<SINH_FUNC>",
    "<SINHN_FUNC>",
    "<TANH_FUNC>",
    "<TANHN_FUNC>",
    "<ACOSH_FUNC>",
    "<ASINH_FUNC>",
    "<ATANH_FUNC>",
    "<EXP_FUNC>",
    "<LOG_FUNC>",
    "<LD_FUNC>",
    "<LG_FUNC>",
    "<BETA_FUNC>",
    "<BETA_REGULARIZED_FUNC>",
    "<GAMMA_FUNC>",
    "\"gammaRegularized(\"",
    "<SQRT_FUNC>",
    "\"cbrt(\"",
    "<ABS_FUNC>",
    "<SGN_FUNC>",
    "<FLOOR_FUNC>",
    "<CEIL_FUNC>",
    "<CONJUGATE_FUNC>",
    "<ARG_FUNC>",
    "<ROUND_FUNC>",
    "\"random()\"",
    "\"polartopoint\\u00a7(\"",
    "<FUNCTION_LABEL>",
    "<TEXT>",
    "<CHAR>",
    "\":\"",
    "\"[\"",
    "\"]\"",
    "\")\"",
    "\"{\"",
    "\"}\"",
    "\"(\"",
  };

}
